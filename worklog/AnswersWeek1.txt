Week1 Step1:
In the makefile we find the settings to start the qemu machine as VAB or VPB. For VAB we notice that the cpu used is arm926 while for VPB its cortex-a8. Concerning memory, VAB will use 1M while VPB memory is set to 32M.
The linker script contains the instructions to create the memory map of the allocated memory for the application, while the memory map is the "result" of the operation of linking made.
The bss section is aligned on a 16-byte boundary since in reset.s the code clears (zeroes) 16 bytes at a time, aka 4 registers made up of 32bits (4 bytes) each 4*4 bytes=16 bytes total.

Week1 Step2:
The periodic zzzz... is printed when the count is greater than 100000 and the count is increased by 1 every cycle of the while when a character is not inserted, that equals to having a zzz... every couple of seconds.
Without the if clause the printing of zzzz.. would be extremely fast.
Removing the periodic printing of zzz... the internal while loop simply waits for a character to be inserted without any blocking and spinning infinitely.

The symbol _stack_top needs to be defined at the end because its after the memory for the stack has been allocated, so the correct stack top will be retrieved only after that operation.

To verify in c that the stack works we can try an operation of push in the stack and subsequently an operation of pop. if the result of the pop is the element we previously pushed, the stack should be working properly.

If we called many functions in C we would have a lot of memory allocated for all this functions and risk to get the stack full and go in overflow.
To try to ensure that our program is safe we could use an MMU that helps with growing/shrinking of the stack, its safer wrt overflows. We could then implement multiple levels of cache.
