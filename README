Structure of the git folder:
-arm.boot contains all the files of the coding part of the project;
-worklog contains the instructions to the assignment given (Week1 and Readme), a file called AnswersWeek1.txt where i wrote the answers and some comments about the assignment 1; finally, myWork.txt is a worklog where I wrote how i worked on the project and when i did what steps.

----------------------------------------------------------------------------------------------

Overview:
I started this project with little to no knowledge about arm programming, without no experience with gdb debugger and little experience in the linux environment in general. So it is fair to say this project was a challenge. From the beginning i struggled with the basics, even installing the programs and running the code given took me a while and delayed the start of the actual project.

I managed to complete week1 assignment putting a lot of effort and hours of study into it, trying to understand to a non superficial level what i was doing, and i managed to finish it and understand to a certain point what was behind it.

To start the Week1 shell program, starting from the tag Week1.part4:
first window: make run2
second window: telnet localhost 4321


For Assignment 2, the struggles only increased. The assignment looked very abstract at first and it took me a while (around 1 week or more) to even understand where to start and what should be modified.
I read the slides over and over and studied well to understand what to do and i managed to write something.

-------------------------------------------------------------------------------------------------

About Assignment 2 and what i did:
I created in uart.c the function uart_init, that sets the fifo queues to active setting the CUARTLCR_H_FEN to active and also setting the UART_IMSC, the receiver interrupt mask. I also created the uart_rx_handler, that is called to handle the insertion of data into the circular buffer, when an interrupt is called.In the kernel.ld i added the end ot the irq stack, irq_stack_top, and not being sure where its supposed to end i set it just after the normal stack top. In vector.s i modified the _irq_handler to the function _isr, that upcalls the isr c function in vic.c. 
I also modified the function uart_receive to get the char from the circular buffer, if not empty.
At this point, in the main i called vic_setup, vic_enable, uart_init (that calls cb_init) and vic_irq_enable, passing as irq parameter the number 12, (that should correspond to the uart0 interrupt controller) and passing the function uart_rx_handler, so that the handler can be called from that side. 
I worked with the gdb debugger, checking carefully how the functions are called and in which order.
When a char is sent from serial line, an interrupt is called and the isr function is invoked and after that the uart_rx_handler handles the insertion of the char in the circular buffer. When the main reaches the uart_receive function call, the uart_receive can get the char previously inserted in the cb and assign it to our character.
Until here, everything seemed to work well, but after this point i encountered weird problems: some of my c variables (int j, vertical and orizontal) acquire random values and it makes it impossinble for my program to work. I tried to solve this problem and research extensively on the internet and ask colleagues but i was not able to solve this problem. I think something goes wrong either in the _wfi call in irqs.s or most probably in the _irq_handler code that i added in vector.s. something happen for which my variables do not restore itself properly when going back to the main.

The Assignment 2 program, for this reasons, will not run smoothly and how it is supposed to be. I think i got pretty close to finishing the project but unfortunately, with my not so extended knowledge in bare-metal type of programming i could only do so much, and i really did put a lot of effort and hours/days into both practical coding, debugging and actual study of the slides and material given.



 
